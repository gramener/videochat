WEBVTT

0
00:00:00.000 --> 00:00:10.000
Hi, my name's Phelan Vendeville, and I'm a systems engineer in the site reliability organization at Google.

1
00:00:14.000 --> 00:00:21.000
Video games, music players, and internet browsers are all different types of software that have completely different functions.

2
00:00:21.000 --> 00:00:23.500
Think of the apps on your phone and your laptop.

3
00:00:23.500 --> 00:00:29.980
We spend a lot of time interacting with this type of software, but we may not know how it actually works or gets added to.

4
00:00:30.000 --> 00:00:31.800
to our systems.

5
00:00:31.800 --> 00:00:34.080
In the last few videos, we learned about networking

6
00:00:34.080 --> 00:00:35.700
and the internet.

7
00:00:35.700 --> 00:00:37.540
There are tons of applications out there

8
00:00:37.540 --> 00:00:39.660
that require the internet to work.

9
00:00:39.660 --> 00:00:40.480
Think about it.

10
00:00:40.480 --> 00:00:45.980
Your social media apps, messaging apps, and others run off the internet.

11
00:00:45.980 --> 00:00:48.760
This internet integration isn't just magically

12
00:00:48.760 --> 00:00:50.360
added to your application.

13
00:00:50.360 --> 00:00:53.220
It's built in to require it to function.

14
00:00:53.220 --> 00:00:56.020
Before we go too far into the world of software,

15
00:00:56.020 --> 00:00:58.740
I want to call out some common terms related to software

16
00:00:58.740 --> 00:00:59.980
that you might hear.

17
00:01:00.000 --> 00:01:05.360
Coding, scripting, and programming are all terms that might seem a little blurry.

18
00:01:05.360 --> 00:01:09.840
They generally refer to the same thing, but they each have small distinctions.

19
00:01:09.840 --> 00:01:13.920
Coding is basically translating one language to another.

20
00:01:13.920 --> 00:01:21.360
This can be coding from English to Spanish, English to Morse code, or even English to a computer language.

21
00:01:21.360 --> 00:01:26.000
When someone builds an application, we refer to it as coding an application.

22
00:01:26.000 --> 00:01:29.200
Scripting is coding in a scripting language.

23
00:01:29.200 --> 00:01:33.480
We'll talk about scripting languages in a later lesson, but scripts are mainly used to perform

24
00:01:33.480 --> 00:01:36.620
a single or limited range task.

25
00:01:36.620 --> 00:01:40.120
There are languages we can use to build these.

26
00:01:40.120 --> 00:01:43.980
Programming is coding in a programming language.

27
00:01:43.980 --> 00:01:48.560
Programming languages are special languages that software developers use to write instructions

28
00:01:48.560 --> 00:01:51.180
for computers to execute.

29
00:01:51.180 --> 00:01:56.760
Larger applications like your web browser, text editors, and music players are all usually

30
00:01:56.760 --> 00:01:58.720
written in programming languages.

31
00:01:59.200 --> 00:02:01.020
When we use the term software,

32
00:02:01.020 --> 00:02:04.200
it generally refers to something that was programmed.

33
00:02:05.180 --> 00:02:07.520
We'll use these terms pretty interchangeably,

34
00:02:07.520 --> 00:02:09.340
so don't sweat the details.

35
00:02:09.340 --> 00:02:11.400
Now, onwards and upwards.

36
00:02:11.400 --> 00:02:15.220
So what is software made of and who builds it?

37
00:02:15.220 --> 00:02:17.060
It's a great question.

38
00:02:17.060 --> 00:02:19.900
Anyone who knows a programming or a scripting language

39
00:02:19.900 --> 00:02:21.880
can use it to write code.

40
00:02:21.880 --> 00:02:24.300
There's a huge demand for this skill set,

41
00:02:24.300 --> 00:02:27.360
and it's becoming easier for someone to learn to code.

42
00:02:27.360 --> 00:02:29.180
Take, for example, our very own,

43
00:02:29.200 --> 00:02:33.040
course five, which will cover the basics of using a coding language.

44
00:02:33.900 --> 00:02:37.840
Shameless product plug I know, especially since I wrote the material.

45
00:02:38.780 --> 00:02:40.060
Anyway, moving on.

46
00:02:40.420 --> 00:02:44.820
If you're going to be working in IT, it's important that you understand how software works

47
00:02:44.820 --> 00:02:46.700
and how it gets installed on your systems.

48
00:02:47.700 --> 00:02:52.700
You might encounter software errors or just good old-fashioned failures, and you need

49
00:02:52.700 --> 00:02:54.400
to understand how to deal with them.

50
00:02:54.700 --> 00:02:58.780
By the end of this module, you'll be able to understand what software is,

51
00:02:58.780 --> 00:03:03.280
how it works, and how to install it, remove it, and update it,

52
00:03:03.740 --> 00:03:06.660
all within the Linux and Windows operating systems.

53
00:03:11.740 --> 00:03:15.940
When you write content, create a piece of art, or engineer something,

54
00:03:16.500 --> 00:03:19.160
your work is protected for your use and distribution.

55
00:03:19.640 --> 00:03:22.940
There's usually some other caveats depending on the laws in your country.

56
00:03:23.560 --> 00:03:26.980
But in general, copyright is used when creating original work.

57
00:03:26.980 --> 00:03:30.980
Software that's written is also protected by copyright.

58
00:03:30.980 --> 00:03:34.980
Software developers can choose what they do with their software.

59
00:03:34.980 --> 00:03:38.980
For commercial software, it's common to let someone else use their software

60
00:03:38.980 --> 00:03:40.980
if they pay for a license.

61
00:03:40.980 --> 00:03:42.980
For non-commercial software,

62
00:03:42.980 --> 00:03:46.980
a popular option is making it open source.

63
00:03:46.980 --> 00:03:49.980
This means the developers will let other developers share,

64
00:03:49.980 --> 00:03:52.980
modify, and distribute their software for free.

65
00:03:52.980 --> 00:03:54.980
Score.

66
00:03:54.980 --> 00:03:56.980
Some amazing software efforts

67
00:03:56.980 --> 00:03:59.940
have been developed in advance because of open source.

68
00:03:59.940 --> 00:04:02.400
One major example is the Linux kernel,

69
00:04:02.400 --> 00:04:05.280
which is used in the Android OS and in enterprise

70
00:04:05.280 --> 00:04:06.860
and personal computers.

71
00:04:06.860 --> 00:04:10.140
Hundreds of millions of devices are running Linux

72
00:04:10.140 --> 00:04:11.620
at this very second.

73
00:04:11.620 --> 00:04:15.500
Libra Office, GIMP, and Firefox are other examples

74
00:04:15.500 --> 00:04:17.440
of open source software.

75
00:04:17.440 --> 00:04:20.140
Open source projects are usually contributed

76
00:04:20.140 --> 00:04:23.220
by developers who work on the project for free

77
00:04:23.220 --> 00:04:24.360
in their free time.

78
00:04:24.360 --> 00:04:26.600
These massive software development efforts

79
00:04:26.600 --> 00:04:29.820
were essentially built by a community of volunteers.

80
00:04:29.820 --> 00:04:31.260
How great is that?

81
00:04:31.260 --> 00:04:34.360
In an IT environment, you'll have to pay special attention

82
00:04:34.360 --> 00:04:37.360
to the types of software you use.

83
00:04:37.360 --> 00:04:40.980
Some may require you to pay multiple licenses to use it.

84
00:04:40.980 --> 00:04:43.180
Others might be free and open source.

85
00:04:43.180 --> 00:04:45.300
It's important to check the license agreement

86
00:04:45.300 --> 00:04:47.600
of any software before you install it.

87
00:04:47.600 --> 00:04:50.360
We've talked about some of the basics of software.

88
00:04:50.360 --> 00:04:52.640
But now let's shift to the two types of software

89
00:04:52.640 --> 00:04:55.360
you'll encounter, categorized by function.

90
00:04:55.360 --> 00:05:03.160
Application software is any software created to fulfill a specific need, like a text editor, web browser, or graphic editor.

91
00:05:03.860 --> 00:05:18.640
System software is software used to keep our core system running like operating system tools and utilities There also a type of system software that we haven defined yet called firmware Firmware is software that permanently stored on a computer component

92
00:05:18.640 --> 00:05:21.640
Can you think of a firmware that we've talked about already?

93
00:05:21.640 --> 00:05:23.640
If you thought of the BIOS, you're right.

94
00:05:23.640 --> 00:05:27.640
The BIOS helps start up the hardware on your computer

95
00:05:27.640 --> 00:05:30.640
and also helps load up your operating system.

96
00:05:30.640 --> 00:05:33.640
So it's important that it's in a permanent location.

97
00:05:33.640 --> 00:05:35.640
I should also call out software versions.

98
00:05:35.640 --> 00:05:41.240
versions. These are important because they tell us what features were added to a specific software

99
00:05:41.240 --> 00:05:46.800
iteration. You'll encounter lots of software versions while you work with software. Developers might

100
00:05:46.800 --> 00:05:52.140
sometimes use a different standard when distinguishing a version, but in general, the majority

101
00:05:52.140 --> 00:06:01.560
of versions follow a sequential numbering trend. You might see something like this. 1.2.5 or 1.3.4.

102
00:06:01.560 --> 00:06:04.260
Which of these do you think is the newer version?

103
00:06:05.260 --> 00:06:10.520
It's 1.3.4 because it's a larger number than 1.2.5.

104
00:06:11.220 --> 00:06:14.480
You can read more about software versioning in the supplemental reading.

105
00:06:14.940 --> 00:06:16.640
You'll have to work with all kinds of software.

106
00:06:17.440 --> 00:06:19.800
Fortunately, it basically all works the same way.

107
00:06:20.260 --> 00:06:24.660
Once you learn how one piece of software works, you'll understand how others might function.

108
00:06:25.260 --> 00:06:27.840
We're going to learn how in the next few videos.

109
00:06:31.560 --> 00:06:38.040
Earlier in this course, we talked about how programs are instructions that are given to a CPU.

110
00:06:38.040 --> 00:06:43.920
We can send binary code or bits to our CPU, then they'll use an instruction set to run those

111
00:06:43.920 --> 00:06:45.120
commands.

112
00:06:45.120 --> 00:06:51.180
But these CPUs might be from different manufacturers and may have different instructions.

113
00:06:51.180 --> 00:06:55.840
There might even be all kinds of different hardware components, like video cards and hard

114
00:06:55.840 --> 00:06:59.880
drives, that also have their own special interfaces.

115
00:06:59.880 --> 00:07:03.880
So how do we write a program that the hardware can understand?

116
00:07:03.880 --> 00:07:09.280
Well, one way would be to write a program for each possible combination of CPU and hardware

117
00:07:09.280 --> 00:07:12.880
using the native languages and interfaces of these components.

118
00:07:12.880 --> 00:07:17.440
But there are potentially millions of possible configurations of hardware.

119
00:07:17.440 --> 00:07:22.120
So how do we get anything to work with all this complex and diverse hardware?

120
00:07:22.120 --> 00:07:26.760
Well, thanks to the efforts of computer scientists and the principle of abstraction,

121
00:07:26.760 --> 00:07:29.860
we can now use programming languages to write instructions

122
00:07:29.880 --> 00:07:32.120
that can be run on any hardware.

123
00:07:37.120 --> 00:07:38.780
Remember that in the 1950s,

124
00:07:38.780 --> 00:07:41.920
computer scientists used punch cards to store programs?

125
00:07:41.920 --> 00:07:44.060
These punch cards represented bits

126
00:07:44.060 --> 00:07:46.160
that the CPU would read and then perform

127
00:07:46.160 --> 00:07:49.600
a series of instructions based on what the program was.

128
00:07:49.600 --> 00:07:52.200
The binary code could have looked like this,

129
00:07:53.400 --> 00:07:56.280
and the instructions would be translated to this.

130
00:07:57.280 --> 00:07:59.860
Grab some input data from this location in memory,

131
00:07:59.880 --> 00:08:02.880
Using the input data, do some math,

132
00:08:02.880 --> 00:08:06.880
then put some output data into this location in memory.

133
00:08:06.880 --> 00:08:12.880
But storing programs on punch cards was a long and tedious task.

134
00:08:12.880 --> 00:08:16.880
The programs had to be kept on stacks and stacks of punch cards.

135
00:08:16.880 --> 00:08:20.880
Computer scientists needed a better way to send instructions to a machine.

136
00:08:20.880 --> 00:08:22.880
But how?

137
00:08:22.880 --> 00:08:27.880
Eventually, a language was invented called assembly language

138
00:08:27.880 --> 00:08:32.040
that allowed computer scientists to use human readable instructions,

139
00:08:32.040 --> 00:08:35.640
assembled into code that the machines could understand.

140
00:08:35.640 --> 00:08:37.880
Instead of generating binary code,

141
00:08:37.880 --> 00:08:41.400
computer scientists could program using machine instructions,

142
00:08:41.400 --> 00:08:43.240
just like this.

143
00:08:43.240 --> 00:08:45.720
Take integer from register 1,

144
00:08:45.720 --> 00:08:48.280
take integer from register 2,

145
00:08:48.280 --> 00:08:51.640
add integer from register 1 and register 2,

146
00:08:51.640 --> 00:08:54.360
and output to register 4.

147
00:08:54.360 --> 00:08:57.400
This example makes it look like a human could read it,

148
00:08:57.400 --> 00:08:59.400
But don't be fooled.

149
00:08:59.400 --> 00:09:02.400
Let's take an example of saying something simple like,

150
00:09:02.400 --> 00:09:05.400
Hello World, in assembly language.

151
00:09:05.400 --> 00:09:07.400
It looks pretty robotic.

152
00:09:07.400 --> 00:09:12.400
Don't get me wrong, that's still an improvement over its binary code cousin.

153
00:09:12.400 --> 00:09:17.400
But assembly language was still just a thin veil for machine code.

154
00:09:17.400 --> 00:09:22.400
It still didn't let computer programmers use real human words to build a program.

155
00:09:22.400 --> 00:09:25.400
And a program that was written for a specific CPU

156
00:09:25.400 --> 00:09:29.480
could only be run on that CPU or family of CPUs.

157
00:09:29.480 --> 00:09:33.240
A program was needed that could run on many types of CPUs.

158
00:09:33.240 --> 00:09:36.360
Enter compiled programming languages.

159
00:09:36.360 --> 00:09:40.760
A compiled programming language uses human readable instructions,

160
00:09:40.760 --> 00:09:43.160
then sends them through a compiler.

161
00:09:43.160 --> 00:09:45.640
The compiler takes the human instructions

162
00:09:45.640 --> 00:09:48.440
and compiles them into machine instructions.

163
00:09:48.440 --> 00:09:52.440
Admiral Grace Hopper invented this back in 1959

164
00:09:52.440 --> 00:09:55.240
to help make programming easier.

165
00:09:55.400 --> 00:10:01.400
Compilers are a key component to programming and helped pave the road that led us to today's modern computing.

166
00:10:01.400 --> 00:10:05.400
Thanks to compilers, we can now use something like this.

167
00:10:05.400 --> 00:10:09.400
And it would be the same thing as this.

168
00:10:09.400 --> 00:10:14.400
Computer scientists have developed hundreds of programming languages in the past couple of decades

169
00:10:14.400 --> 00:10:29.300
to try and abstract the different CPU instructions into simpler commands Along the way another type of language emerged that was interpreted rather than compiled Interpreted languages aren compiled ahead of time

170
00:10:29.300 --> 00:10:31.840
A file that has code written in one of these languages

171
00:10:31.840 --> 00:10:33.800
is usually called a script.

172
00:10:33.800 --> 00:10:36.100
The script is run by an interpreter,

173
00:10:36.100 --> 00:10:39.140
which interprets the code into CPU instructions

174
00:10:39.140 --> 00:10:41.540
just in time to run them.

175
00:10:41.540 --> 00:10:43.700
You'll learn how to write code using a scripting language

176
00:10:43.700 --> 00:10:44.960
later in this program.

177
00:10:44.960 --> 00:10:48.260
As an IT support specialist, scripting can help you

178
00:10:48.280 --> 00:10:50.620
by harnessing the power of a computer

179
00:10:50.620 --> 00:10:52.920
to perform tasks on your behalf,

180
00:10:52.920 --> 00:10:54.880
allowing you to solve a problem once

181
00:10:54.880 --> 00:10:57.000
and then move on to the next thing.

182
00:10:57.000 --> 00:11:00.000
Programming languages are used to create programs

183
00:11:00.000 --> 00:11:03.920
that can be run to perform a task or many tasks.

184
00:11:03.920 --> 00:11:06.160
There are lots of types of programs,

185
00:11:06.160 --> 00:11:09.520
and in the next lesson, we'll talk about how to manage them.

186
00:11:14.520 --> 00:11:17.240
Programs, software, and applications.

187
00:11:17.240 --> 00:11:19.840
are terms that are synonymous with each other.

188
00:11:19.840 --> 00:11:21.920
For now, we'll go ahead and use the term software

189
00:11:21.920 --> 00:11:23.580
to refer to any of these.

190
00:11:23.580 --> 00:11:26.960
We've already had a rundown of the different types of software.

191
00:11:26.960 --> 00:11:28.420
There are certain types of software

192
00:11:28.420 --> 00:11:31.420
that perform specific functions, like drivers,

193
00:11:31.420 --> 00:11:33.920
which allow us to interact with our hardware.

194
00:11:33.920 --> 00:11:35.360
There are applications that we use

195
00:11:35.360 --> 00:11:37.700
for our day-to-day job functions,

196
00:11:37.700 --> 00:11:39.320
and there are utilities that we use,

197
00:11:39.320 --> 00:11:42.840
like a calculator, settings, and other tools.

198
00:11:42.840 --> 00:11:45.540
With the seemingly endless options for software,

199
00:11:45.540 --> 00:11:46.800
how do we know which ones to use?

200
00:11:46.800 --> 00:11:52.800
to use? How do we deal with them in a workplace setting and in our personal lives? Software

201
00:11:52.800 --> 00:11:59.200
is always changing. Developers are releasing updates, software companies change, features are added,

202
00:11:59.200 --> 00:12:04.880
and so on. This constant change is completely out of our control, and it can cause a lot of

203
00:12:04.880 --> 00:12:10.000
headaches in the IT world. Let's say the company that builds your payroll system pushes out

204
00:12:10.000 --> 00:12:16.160
a software update that causes settings to change, or even worse, completely breaks the compatibility

205
00:12:16.160 --> 00:12:18.200
with your own company, it can happen.

206
00:12:19.300 --> 00:12:21.080
You should always test new software

207
00:12:21.080 --> 00:12:22.700
before letting your company use it.

208
00:12:23.060 --> 00:12:25.420
Another thing to worry about is old software.

209
00:12:26.220 --> 00:12:28.120
When you run old software on your machine,

210
00:12:28.420 --> 00:12:31.400
you risk being exposed to cybersecurity attacks

211
00:12:31.400 --> 00:12:33.580
that take advantage of software bugs.

212
00:12:34.000 --> 00:12:36.300
A software bug is an error in software

213
00:12:36.300 --> 00:12:38.280
that causes unexpected results.

214
00:12:39.020 --> 00:12:41.860
We'll deep dive into computer security in a later course.

215
00:12:42.460 --> 00:12:44.660
For now, know that software updates

216
00:12:44.660 --> 00:12:46.140
usually contain critical,

217
00:12:46.160 --> 00:12:50.600
security updates and new features and have better compatibility with your system.

218
00:12:51.660 --> 00:12:54.540
A good guideline is to update your software constantly.

219
00:12:55.080 --> 00:12:59.920
Another problem that plagues the IT world when it comes to software is software management.

220
00:13:00.600 --> 00:13:04.460
If you're setting up a computer for someone, you want to make sure that they'll have all

221
00:13:04.460 --> 00:13:07.120
the necessary tools they need to hit the ground running.

222
00:13:08.080 --> 00:13:11.760
That means you'll need to install all the software required for their job.

223
00:13:12.400 --> 00:13:16.140
That may also mean that sometimes you'll want to remove software that isn't.

224
00:13:16.160 --> 00:13:17.660
required for the job.

225
00:13:17.660 --> 00:13:20.540
We may not realize if a piece of software we installed

226
00:13:20.540 --> 00:13:23.840
is malicious software, which causes harm to your computer.

227
00:13:23.840 --> 00:13:26.400
It's always a good idea to check if software comes

228
00:13:26.400 --> 00:13:29.360
from a reputable source before you install it.

229
00:13:29.360 --> 00:13:32.540
A common industry practice is to not allow users

230
00:13:32.540 --> 00:13:36.240
to install software without administrator approval.

231
00:13:36.240 --> 00:13:38.760
This prevents users from installing unwanted software

232
00:13:38.760 --> 00:13:41.540
because they're actually blocked with an error message

233
00:13:41.540 --> 00:13:43.260
that says they need an administrator

234
00:13:43.260 --> 00:13:45.340
to enter their login credentials.

235
00:13:45.340 --> 00:13:46.140
Before we get too far,

236
00:13:46.160 --> 00:13:47.620
far ahead of ourselves.

237
00:13:47.620 --> 00:13:49.920
Let's cover the basics of software management,

238
00:13:49.920 --> 00:13:53.660
which include installing, updating, and removing software.

239
00:13:53.660 --> 00:13:55.920
In the videos up next, we're going to walk through

240
00:13:55.920 --> 00:13:58.500
how to do these steps in a Windows environment

241
00:13:58.500 --> 00:14:00.540
and a Linux environment.

242
00:14:00.540 --> 00:14:02.660
Ready, set, go.

243
00:14:06.660 --> 00:14:11.660
Git is a version control system that helps keep track of changes

244
00:14:11.660 --> 00:14:14.040
made to files and directories, like how

245
00:14:14.040 --> 00:14:16.140
some word processor today have a revision

246
00:14:16.160 --> 00:14:17.500
history feature.

247
00:14:17.500 --> 00:14:18.980
If you didn't like something you wrote,

248
00:14:18.980 --> 00:14:21.960
you can just go back to a previous version.

249
00:14:21.960 --> 00:14:24.540
We're going to be using Git in later courses,

250
00:14:24.540 --> 00:14:26.980
but for now, we're just going to go ahead and install it.

251
00:14:26.980 --> 00:14:29.220
First, we're going to grab the install program

252
00:14:29.220 --> 00:14:30.840
from Git's website.

253
00:14:30.840 --> 00:14:34.020
We're going to download the 64-bit executable.

254
00:14:34.020 --> 00:14:37.080
Remember from an earlier lesson that we're using a 64-bit

255
00:14:37.080 --> 00:14:41.240
CPU architecture, so we should install 64-bit applications

256
00:14:41.240 --> 00:14:42.960
for better compatibility.

257
00:14:42.960 --> 00:14:46.140
Next up, you'll see the file extension.exee.

258
00:14:46.160 --> 00:14:50.600
This is a little different than the text or image file extensions we've seen up until now.

259
00:14:51.660 --> 00:14:55.980
EXE is a file extension found in Windows for an executable file.

260
00:14:56.640 --> 00:14:59.020
We'll learn more about this in a later lesson too.

261
00:14:59.600 --> 00:15:03.700
For now, just double click on this, and it'll ask us if we want to install the file.

262
00:15:16.160 --> 00:15:39.920
Voila that it Now you can start using it Some program installations might ask you to reboot Make sure to do that since there might be some system files or processes

263
00:15:39.920 --> 00:15:43.920
that also need to restart for your new software to work correctly.

264
00:15:43.920 --> 00:15:46.920
To verify that you now have Get installed,

265
00:15:46.920 --> 00:15:49.920
you can navigate to add or remove programs.

266
00:15:49.920 --> 00:15:54.920
From here, you can see what applications are installed on the machine.

267
00:15:54.920 --> 00:15:55.920
And there it is.

268
00:15:55.920 --> 00:15:58.920
Get version 2.14.1.1.

269
00:15:58.920 --> 00:15:59.899
Let's say you had to have a new.

270
00:15:59.920 --> 00:16:03.600
an older version of Get installed and you wanted to update it to the new version.

271
00:16:04.399 --> 00:16:07.680
Luckily, Windows makes it easy for us to do just that.

272
00:16:08.360 --> 00:16:13.000
We can install it just like we did and it'll ask if we want to upgrade to the newest version.

273
00:16:13.320 --> 00:16:18.279
To remove software from Windows, you can just search for the add or remove programs setting.

274
00:16:18.680 --> 00:16:23.519
From there, select the application you want to remove and you'll see a button to uninstall.

275
00:16:24.360 --> 00:16:28.000
Let's go ahead and click this and run through an uninstall of the software.

276
00:16:28.000 --> 00:16:31.279
It asks us for an administrator password.

277
00:16:32.079 --> 00:16:37.019
We have safety guards in place to prevent unauthorized users from installing or uninstalling software.

278
00:16:37.660 --> 00:16:44.079
We'll learn more about this later, but for now, since I'm an administrator, I'm just going to enter my password and uninstall the software.

279
00:16:44.920 --> 00:16:50.880
Once you uninstall software, restart your computer so it can do the necessary cleanup to completely get rid of it.

280
00:16:50.880 --> 00:16:59.380
Now that you know how to install, update, and remove software on Windows,

281
00:16:59.380 --> 00:17:01.959
let's do the same for Linux.

282
00:17:01.959 --> 00:17:05.400
Let's navigate back to the Git download page.

283
00:17:05.400 --> 00:17:10.280
Under the Linux page, you'll actually see many different ways to install Git.

284
00:17:10.280 --> 00:17:15.520
This is because the different Linux distributions use different package installers.

285
00:17:15.520 --> 00:17:20.480
Since we're using Ubuntu, we're just going to use this command, App, install, Git.

286
00:17:20.880 --> 00:17:24.880
Apt is the command we use in Ubuntu's package manager,

287
00:17:24.880 --> 00:17:27.880
and the install option will let us install something.

288
00:17:27.880 --> 00:17:30.880
Let's go ahead and run this in our terminal.

289
00:17:30.880 --> 00:17:34.880
We're getting an error that says permission denied.

290
00:17:34.880 --> 00:17:37.880
Like Windows, when we install something on our machine,

291
00:17:37.880 --> 00:17:41.880
we need to tell the computer that we're authorized to install software.

292
00:17:41.880 --> 00:17:45.880
Right now, we can preface this command with another Linux command,

293
00:17:45.880 --> 00:17:49.880
SUDO, which stands for superuser do.

294
00:17:49.880 --> 00:17:53.880
We'll talk more about the details of a Linux administrator in a later course.

295
00:17:53.880 --> 00:17:55.880
So much foreshadowing.

296
00:17:55.880 --> 00:17:59.880
It asks us for a password, so let's add that in.

297
00:17:59.880 --> 00:18:01.880
Ah, we're getting a lot of output.

298
00:18:01.880 --> 00:18:05.880
We'll talk more about what each of these lines mean in detail soon.

299
00:18:05.880 --> 00:18:08.880
It's just asking if we want to continue installing this application,

300
00:18:08.880 --> 00:18:12.880
and since we do, I'm going to say why and enter.

301
00:18:12.880 --> 00:18:16.880
To update a package, you do the exact same thing as we just did

302
00:18:16.880 --> 00:18:18.880
and install a newer software version.

303
00:18:18.880 --> 00:18:25.880
version. To remove a package, we could also use a command pretty similar to the install command,

304
00:18:25.880 --> 00:18:36.880
except this time we want to remove a package. This asks us if we want to continue with these changes.

305
00:18:36.880 --> 00:18:46.880
Let's go ahead and type Y and enter. That's it. Now you know how to install, update, and remove software on Linux and Windows. Nice work.

306
00:18:48.880 --> 00:18:52.880
You're doing awesome.

307
00:18:52.880 --> 00:18:58.679
By now, you've learned what software is, how it integrates with our computer, and how we manage it.

308
00:18:58.679 --> 00:19:03.000
It was easy to install, update, and remove software on one machine.

309
00:19:03.000 --> 00:19:06.120
But what if you had to do that for multiple machines?

310
00:19:06.120 --> 00:19:07.960
It would take up a lot of time.

311
00:19:07.960 --> 00:19:12.480
If only there was a way we could have it done automatically for us.

312
00:19:12.480 --> 00:19:14.600
Spoiler alert, there is.

313
00:19:14.600 --> 00:19:16.960
We use software to help us with this.

314
00:19:16.960 --> 00:19:18.860
There are lots of tools out there that help me.

315
00:19:18.880 --> 00:19:21.300
make managing computers easier.

316
00:19:21.300 --> 00:19:23.140
We use automation for this.

317
00:19:23.140 --> 00:19:26.179
Automation makes processes work automatically.

318
00:19:26.179 --> 00:19:28.179
You can even use the tools of automation,

319
00:19:28.179 --> 00:19:32.260
like programs and scripts, to help you with troubleshooting issues.

320
00:19:32.260 --> 00:19:35.320
So instead of reading hundreds of lines of log files

321
00:19:35.320 --> 00:19:38.080
manually to discover when a particular error occurred

322
00:19:38.080 --> 00:19:41.240
on a computer, you could write a script to read the log

323
00:19:41.240 --> 00:19:44.940
for you and print out only the relevant line.

324
00:19:44.940 --> 00:19:47.440
We'll learn a lot more about automation later.

325
00:19:47.440 --> 00:19:48.860
But just know that software has

326
00:19:48.880 --> 00:19:53.159
many uses, including making processes more efficient and easier.

327
00:19:53.720 --> 00:19:55.720
You made it all the way through software.

328
00:19:56.360 --> 00:19:56.880
Nice work.

329
00:19:57.560 --> 00:20:00.200
We'll meet again in course five, IT automation.

330
00:20:00.720 --> 00:20:01.560
It's not that scary.

331
00:20:01.960 --> 00:20:03.000
Really, it's not.

332
00:20:03.919 --> 00:20:09.040
I'm excited to show you the power of automation and teach you some of actual coding in Ruby.

333
00:20:09.520 --> 00:20:11.320
Next, you'll meet Marty Clark.

334
00:20:12.040 --> 00:20:18.560
She's your instructor for troubleshooting, and we'll talk to you about how good customer service is critical to IT support.

335
00:20:18.880 --> 00:20:22.720
In the meantime, work hard, soak up a ton of knowledge,

336
00:20:22.720 --> 00:20:24.380
and have some fun along the way.

337
00:20:24.380 --> 00:20:26.020
I'll see you back here later on.

338
00:20:27.120 --> 00:20:29.179
Congratulations on finishing this lesson

339
00:20:29.179 --> 00:20:31.820
from the Google IT Support Certificate.

340
00:20:31.820 --> 00:20:34.419
Access to full experience, including job search help,

341
00:20:34.419 --> 00:20:35.860
and get the official certificate

342
00:20:35.860 --> 00:20:38.980
by clicking the icon or the link in the description.

343
00:20:38.980 --> 00:20:41.600
Watch the next lesson in the course by clicking here.

344
00:20:41.600 --> 00:20:43.580
And subscribe to our channel for more lessons

345
00:20:43.580 --> 00:20:45.780
from upcoming Google Career Certificates.